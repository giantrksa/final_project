version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - app-network

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: welldb
    ports:
      - "5432:5432"
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  spark:
    image: bitnami/spark:3.4.1
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_RPC_ENCRYPTION_ENABLED: "no"
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: "no"
      SPARK_SSL_ENABLED: "no"
    ports:
      - "8080:8080"  # Spark UI
    networks:
      - app-network

  producer:
    build:
      context: ./scripts/producer
      dockerfile: Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
      TOPIC_NAME: well_logs
      LAS_FILE_PATH: /data/alcor1.las
    volumes:
      - ./data:/data
    depends_on:
      - kafka
    networks:
      - app-network

  spark-consumer:
    build:
      context: ./scripts/spark-consumer
      dockerfile: Dockerfile
    environment:
      KAFKA_BOOTSTRAP_SERVER: kafka:9092
      TOPIC_NAME: well_logs
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: welldb
      DB_USER: postgres
      DB_PASSWORD: postgres
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
      spark:
        condition: service_started
    networks:
      - app-network

  dashboard:
    build:
      context: ./scripts/dashboard
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/welldb
    ports:
      - "8050:8050"
    depends_on:
      - postgres
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
