version: '3.8'

services:
  # Zookeeper Service
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
    networks:
      - wlogging-network

  # Kafka Service
  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - wlogging-network

  # PostgreSQL Service
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres_dw
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - wlogging-network

  # Spark Master Service
  spark-master:
    image: bitnami/spark:3.3.0
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "8080:8080"  # Spark Master Web UI
      - "7077:7077"  # Spark Master Port
    networks:
      - wlogging-network

  # Spark Worker Service
  spark-worker:
    image: bitnami/spark:3.3.0
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
    ports:
      - "8081:8081"  # Spark Worker Web UI
    depends_on:
      - spark-master
    networks:
      - wlogging-network

  # Airflow Webserver Service
  airflow-webserver:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    restart: "no"
    depends_on:
      - postgres
      - spark-master
      - kafka
      - zookeeper
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SPARK_MASTER_HOST_NAME=${SPARK_MASTER_HOST_NAME}
      - SPARK_MASTER_PORT=${SPARK_MASTER_PORT}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8083:8080"  # Airflow Web UI
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts  # Removed to prevent overwriting
      - ./spark-scripts:/spark-scripts
      - ./data:/resources/data
    command: ["airflow", "webserver"]

  # Airflow Scheduler Service
  airflow-scheduler:
    build:
      context: .
      dockerfile: docker/airflow/Dockerfile
    restart: "no"
    depends_on:
      - airflow-webserver
      - postgres
      - spark-master
      - kafka
      - zookeeper
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW__CORE__FERNET_KEY}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SPARK_MASTER_HOST_NAME=${SPARK_MASTER_HOST_NAME}
      - SPARK_MASTER_PORT=${SPARK_MASTER_PORT}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./dags:/opt/airflow/dags
      - ./scripts:/opt/airflow/scripts  # Removed to prevent overwriting
      - ./spark-scripts:/spark-scripts
      - ./data:/resources/data
    command: ["airflow", "scheduler"]

  # Dash App Service
  dash-app:
    build:
      context: .
      dockerfile: docker/dash-app/Dockerfile
    restart: always
    ports:
      - "8050:8050"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=postgres_dw
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./apps/dash-lastodash:/app
      - ./data:/resources/data
    command: ["gunicorn", "lastodash:server", "-b", "0.0.0.0:8050"]

networks:
  wlogging-network:

volumes:
  postgres-data:
